// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Assembly {
  id         Int   @default(autoincrement()) @id
  name       String?
  country    String?
  state      String?
  city       String?
  addressOne String?
  addressTwo String?
  contacts   Person[]
  requests   Request[]
  schedule   String?
  @@map(name: "assemblies")
}

model Person {
  id                 Int   @default(autoincrement()) @id
  name               String?
  email              String?
  note               String?
  homePhone          String?
  cellPhone          String?
  country            String?
  state              String?
  city               String?
  addressOne         String?
  addressTwo         String?
  createdAt          DateTime @default(now()) @map(name: "created_at")
  updatedAt          DateTime @updatedAt @map(name: "updated_at")
  requests           Request[]
  contactForAssembly Assembly[]
  contactForMinistry Ministry[]
  @@map(name: "people")
}

model Ministry {
  id         Int   @default(autoincrement()) @id
  name       String?
  website    String?
  email      String?
  emailTwo   String?
  phone      String?
  cellPhone  String?
  details    String?
  country    String?
  state      String?
  city       String?
  addressOne String?
  addressTwo String?
  contacts   Person[]
  requests   Request[]
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")
  @@map(name: "ministries")
}

model Request {
  id            Int   @default(autoincrement()) @id
  content       String?
  publishedAt   DateTime?
  person        Person?  @relation(fields: [personId], references: [id])
  personId      Int?
  assembly      Assembly?  @relation(fields: [assemblyId], references: [id])
  assemblyId    Int?
  ministry      Ministry?  @relation(fields: [ministryId], references: [id])
  ministryId    Int?
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")
  @@map(name: "requests")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  approved      Int?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
