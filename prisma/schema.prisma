generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Assembly {
  id         Int       @id @default(autoincrement())
  name       String?
  country    String?
  state      String?
  city       String?
  addressOne String?
  addressTwo String?
  schedule   String?
  requests   Request[]
  contacts   Person[]

  @@map("assemblies")
}

model Person {
  id                 Int        @id @default(autoincrement())
  name               String?
  email              String?
  homePhone          String?
  cellPhone          String?
  createdAt          DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @updatedAt @map("updated_at")
  addressOne         String?
  addressTwo         String?
  city               String?
  country            String?
  note               String?
  state              String?
  requests           Request[]
  contactForAssembly Assembly[]
  contactForMinistry Ministry[]

  @@map("people")
}

model Ministry {
  id         Int       @id @default(autoincrement())
  name       String?
  details    String?
  country    String?
  state      String?
  city       String?
  addressOne String?
  addressTwo String?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  cellPhone  String?
  email      String?
  emailTwo   String?
  phone      String?
  website    String?
  requests   Request[]
  contacts   Person[]

  @@map("ministries")
}

model Request {
  id          Int       @id @default(autoincrement())
  content     String?
  publishedAt DateTime?
  personId    Int?
  assemblyId  Int?
  ministryId  Int?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  assembly    Assembly? @relation(fields: [assemblyId], references: [id])
  ministry    Ministry? @relation(fields: [ministryId], references: [id])
  person      Person?   @relation(fields: [personId], references: [id])

  @@map("requests")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  approved      Int?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
